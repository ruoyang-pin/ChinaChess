package com.util.score;

public class PositionBonus {

    // 车（Rook/Car）位置加成（红方视角）
    private static final int[][] CAR_POSITION_BONUS = {
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            // 其余行均为0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {-10, 0, 0, 0, 0, 0, 0, 0, -10},
            {-10, 0, 0, 0, 0, 0, 0, 0, -10},
            {-10, 0, 0, 0, 0, 0, 0, 0, -10},
            {-10, 0, 0, 0, 0, 0, 0, 0, -10}
    };

    // 马（Horse）位置加成
    private static final int[][] HORSE_POSITION_BONUS = {
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            {20, 20, 20, 20, 20, 20, 20, 20, 20},
            // 其余行均为0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, -10, 0, 0, 0, 0, 0, -10, 0}
    };

    // 炮（Cannon）位置加成
    private static final int[][] CANNON_POSITION_BONUS = {
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            // 其余行均为0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0}
    };
    // 仕（Guards）九宫格位置加成（只在九宫内有效）
    private static final int[][] GUARDS_POSITION_BONUS = {
            // 0~2行 以九宫格布局给分 其余行0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            // 其余行均为0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0}
    };

    // 相（PrimeMinister）位置加成（只在己方半场有效）
    private static final int[][] PRIME_MINISTER_POSITION_BONUS = {
            // 红方相在0-4行，黑方对称处理
            // 0~2行 以九宫格布局给分 其余行0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            // 其余行均为0
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0}
    };

    // 卒（Soldier）位置加成
    private static final int[][] SOLDIER_POSITION_BONUS = {
            // 0~2行 以九宫格布局给分 其余行0
            {30, 30, 30, 30, 30, 30, 30, 30, 30},
            {30, 30, 30, 30, 30, 30, 30, 30, 30},
            {30, 30, 30, 30, 30, 30, 30, 30, 30},
            {30, 30, 30, 30, 30, 30, 30, 30, 30},
            // 其余行均为0
            {0, 0, 0, 0, 30, 0, 0, 0, 0},
            {0, 0, 0, 0, 30, 0, 0, 0, 0},
            {0, 0, 0, 0, 30, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0}
    };

    // 将（King）位置加成（基本固定，通常是最大值，可以设置为0）
    private static final int[][] KING_POSITION_BONUS = {
            {0, 0, 0, 0, 20, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 20, 0, 0, 0, 0}
    };

    /**
     * 获取位置加成，自动根据颜色做行镜像处理
     *
     * @param row   棋子行坐标 0-9
     * @param col   棋子列坐标 0-8
     * @param type  棋子类型，建议使用 0~6 对应 KING~SOLDIER
     * @param color 颜色，0=红方，1=黑方
     * @return 位置分加成
     */
    public static int getPositionBonusFast(int row, int col, int type, int color) {
        // 黑方镜像行坐标，红方不变
        int realRow = (color == 0) ? row : 9 - row;

        switch (type) {
            case 0:
                return KING_POSITION_BONUS[realRow][col];
            case 1:
                return CAR_POSITION_BONUS[realRow][col];
            case 2:
                return HORSE_POSITION_BONUS[realRow][col];
            case 3:
                return CANNON_POSITION_BONUS[realRow][col];
            case 4:
                return PRIME_MINISTER_POSITION_BONUS[realRow][col];
            case 5:
                return GUARDS_POSITION_BONUS[realRow][col];
            case 6:
                return SOLDIER_POSITION_BONUS[realRow][col];
            default:
                return 0;
        }
    }
}
